from django.http import HttpResponse
from django.shortcuts import render, redirect
from django.views.generic import TemplateView  # Import TemplateView
import os
import pickle
from django.utils.deconstruct import deconstructible
@deconstructible


# create your views here and add parameters title
def index(request):
    
    # Get all Posts
    return render(request, 'lepidoptera/index.html')

def LogIn(request):
    return render(request, 'lepidoptera/login.html')


def SignUp(request):
    return render(request, 'lepidoptera/signup.html')


def classify(request):
    # Get all Posts
    return render(request, 'lepidoptera/classify.html')


def base(request):
    # Get all Posts
    return render(request, 'lepidoptera/base.html')


def data(request):
    def get(self, request, **kwargs):
        # we will pass this context object into the
        # template so that we can access the data
        # list in the template
        context = {
            'data': [
                {
                    'name': 'Celeb 1',
                    'worth': '3567892'
                },
                {
                    'name': 'Celeb 2',
                    'worth': '23000000'
                },
                {
                    'name': 'Celeb 3',
                    'worth': '1000007'
                },
                {
                    'name': 'Celeb 4',
                    'worth': '456789'
                },
                {
                    'name': 'Celeb 5',
                    'worth': '7890000'
                },
                {
                    'name': 'Celeb 6',
                    'worth': '12000456'
                },
                {
                    'name': 'Celeb 7',
                    'worth': '896000'
                },
                {
                    'name': 'Celeb 8',
                    'worth': '670000'
                }
            ]
        }

        return render(request, 'lepidoptera/data.html', context)


def dashboard(request):
    # Get all Posts
    
    return render(request, 'lepidoptera/dashboard.html')


def butterfly(request):
    # Get all Posts
    return render(request, 'lepidoptera/butterfly.html')


def covnet(request):
    # Get all Posts
    return render(request, 'lepidoptera/covnet.html')


def navbar(request):
    # Get all Posts
    return render(request, 'lepidoptera/nav-bar.html')


def weather(request):
    # Get all Posts
   
    # location="GASAN"
    # province="MARINDUQUE"
    # wind="Wind power"
    # direction="Northeast West"
    # print("THE GOOD TEMPERATURE VARIES FROM 20 degree Celsius to 32 degree Celsius for the larvae in order to live")
    # print("\nThe location is in ", location+ "," + province + ", WIND is "+ wind + ",DIRECTION is "+ direction)
    # #TEMPERATURE
    # temp = float(input("Enter today temperature:"))
    # #temp = 0
    # cel = 0
    # fahr = float(temp)
    # cel = (fahr - 32.0) * 5.0 / 9.0

    # def liveweather():
    #     print("TODAY TEMPETATURE is ", "{:.2f}".format(cel), "â€¢ Celsius")
    #     if cel <20 or cel >32:
    #         print("The weather is bad temperature", cel)
    #     else:
    #         print("The weather is good temperature", cel)

    # liveweather()

    return render(request, 'lepidoptera/weather.html')

def main(request):
    # Get all Posts
    return render(request, 'lepidoptera/main.html')


# custom method for generating predictions
def getPredictions(pclass, sex, age, sibsp, parch, fare, C, Q, S):
   
    model = pickle.load(open("data/titanic_train.csv", "rb"))
    scaled = pickle.load(open("scaler.sav", "rb"))
    prediction = model.predict(sc.transform([[pclass, sex, age, sibsp, parch, fare, C, Q, S]]))
    
    if prediction == 0:
        return "not survived"
    elif prediction == 1:
        return "survived"
    else:
        return "error"
        

# our result page view
def result(request):
    pclass = int(request.GET['pclass']) 
    sex = int(request.GET['sex'])
    age = int(request.GET['age'])
    sibsp = int(request.GET['sibsp'])
    parch = int(request.GET['parch'])
    fare = int(request.GET['fare'])
    embC = int(request.GET['embC'])
    embQ = int(request.GET['embQ'])
    embS = int(request.GET['embS'])

    result = getPredictions(pclass, sex, age, sibsp, parch, fare, embC, embQ, embS)

    return render(request, 'lepidoptera/result.html', {'result':result})

def restnet(request):
    # Get all Posts
    return render(request, 'lepidoptera/restnet.html')


def objectmeasurement(request):
    # Get all Posts
    return render(request, 'lepidoptera/object_measurement.html')

def objectidentifier(request):
    # Get all Posts
    return render(request, 'lepidoptera/object_identifier.html')

# def gen(camera):
#     while True:
#         frame = camera.get_frame() 
#         yield(b'--frame\r\n'b'Content-Type:image/jpeg\r\n\r\n' + frame + b\r\n\r\n')
    
# def video_feed(request):
#     return StreamingHttpResponse(gen(VideoCamera()), content_type+'multiple/x-mixed-replace; boundary=frame')


def adddevice(request):
    # Get all Posts
    return render(request, 'lepidoptera/adddevice.html')


def butterfly(request):
    # Get all Posts
    return render(request, 'lepidoptera/butterfly.html')


def camera(request):
    # Get all Posts
    return render(request, 'lepidoptera/camera.html')

def butterfly_identifier(request):
    # Get all Posts
    return render(request, 'lepidoptera/Butterfly_identifier.html')

def user(request):
    # Get all Posts
    # username=request.GET['username']
    # print(username)
    return render(request, 'lepidoptera/user.html')

def classify(request):
    # Get all Posts
    return render(request, 'lepidoptera/classify.html')

def skipper(request):
    # Get all Posts
    return render(request, 'lepidoptera/skipper.html')

def Logout(request):
    # Get all Posts
    return render(request, 'lepidoptera/Logout.html')

def manage_farm(request):
    # Get all Posts
    return render(request, 'lepidoptera/manage_farm.html')

def moth(request):
    # Get all Posts
    return render(request, 'lepidoptera/moth.html')

def My_Farm(request):
    # Get all Posts
    return render(request, 'lepidoptera/My_Farm.html')

def manage(request):
    # Get all Posts
    return render(request, 'lepidoptera/manage.html')

def create_farm_home(request):
    # Get all Posts
    return render(request, 'lepidoptera/create_farm_home.html')

def join_home(request):
    # Get all Posts
    return render(request, 'lepidoptera/join_home.html')


def proper_care(request):
    # Get all Posts
    return render(request, 'lepidoptera/proper_care.html')


def pClassify(request):
    # Get all Posts
    return render(request, 'lepidoptera/pClassify.html')


def cats(request):
    # Get all Posts
    return render(request, 'lepidoptera/cats.html')

def eggs(request):
    # Get all Posts
    return render(request, 'lepidoptera/eggs.html')

def larvalPrediction(request):
    # Get all Posts
    return render(request, 'lepidoptera/larvalPrediction.html')

def LarvaeTrichogrammaDisease(request):
    # Get all Posts
    return render(request, 'lepidoptera/Larvae Trichogramma Disease.html')

from  django.core.files.storage import FileSystemStorage
from keras.models import load_model
from keras.preprocessing import image
import json
from tensorflow import Graph, Session

img_height,img_width=224,224
with open('./models/imagenet_classes.json','r') as f:
    labelInfo=f.read()
labelInfo=json.loads(labelInfo)
#mode=load_model('./models/MobileNetModelImagenet.h5')
model_graph=Graph()
with model_graph.as_default():
    tf_session =Session()
    with tf_session.as_default:
        mode=load_model('./models/MobileNetModelImagenet.h5')

def predictImage(request):
    print(request)
    print(request.POST.dic())
    #print(request.FILES[filePath])
    fileObject=request.FILES['filePath']
    fs=FileSystemStorage()
    filePathName=fs.save(fileObject.name,fileObject)
    filePathName=fs.url(filePathName)

    img + image.load_img(testimage,target_size(img_height,img_width))
    x=image.img_to_array(img)
    predi=model.predict(x)
    x=x/255
    x=x.reshape(i,img_height,img_width,3)
    #predi=model.predict(x)
    with model_graph.as_default():
    tf_session =Session()
    with tf_session.as_default:
        predi=model.predict(x)

    import numpy as numpy
    predictedLabel=labelInfo[str(np.(np.armax(pred[0])))]

    context={'filePathName':filePathName,'predictedLabel':predictedLabel[1]}
    return request(request,'indext.html',context)

def viewDatabase(request):
    listOfImages=os.lisdir('/media)
    listOfImagesPath=['./media/' + 1 for i in listOfImages]
    context=('listOfImagesPath':listOfImagesPath)
